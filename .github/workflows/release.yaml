name: release
on:
 push:
   branches:
     - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      name: Checkout
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: build charts
      shell: bash
      run: |
       git clone https://github.com/mohamedragab2024/k8s-lessons.git
       mkdir -p charts
       cp -r k8s-lessons/charts/* charts/
       rm -rf k8s-lessons
       REPO_NAME=${{ github.event.repository.name }}
         for file in charts/**/*; do
           if [ -f "$file" ]; then
            sed -i "s#<CHART_NAME>#${REPO_NAME}#g" "$file"
          fi
        done
        sed -i "s#<CHART_NAME>#${REPO_NAME}#g" charts/Chart.yaml

    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: charts
        path: charts
        retention-days: 1
        if-no-files-found: ignore

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      name: Checkout
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: create env branch
      shell: bash
      run: |
        git checkout --orphan env/prod  && git rm -rf . || git swich env/prod
        git pull --set-upstream origin env/prod || true

    - uses: actions/download-artifact@v4
      with:
        name: charts
        path: charts

    - name: generate argocd application
      shell: bash
      env:
        APP_NAME: ${{ github.event.repository.name }}
        REPO_NAME: ${{ github.event.repository.name }}
        NAMESPACE: ${{ github.event.repository.name }}
      run: |
        mkdir -p application
      cat << EOF > application/argocd.tpl
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: ${APP_NAME}
        namespace: argocd
        finalizers:
        - resources-finalizer.argocd.argoproj.io
      spec:
        destination:
          namespace: ${NAMESPACE}
          server: https://kubernetes.default.svc
        project: default
        source:
          path: charts
          repoURL: https://github.com/mohamedragab2024/${REPO_NAME}.git
          targetRevision: env/prod
      EOF
        envsubst < application/argocd.tpl > application/${APP_NAME}-argocd-app.yaml

    - name: publish charts
      shell: bash
      run: |
        git checkout --orphan env/prod
        git pull --set-upstream origin env/prod || true
        git add .
        git commit -m "Create a new version" || true
        git push origin env/prod || true



    

        
    

    # - name: create env branch
    #   shell: bash
    #   run: |
    #     git checkout --orphan env/prod  && git rm -rf . || git swich env/prod
    #     git pull --set-upstream origin env/prod || true
        
    # - name: build charts
    #   shell: bash
    #   env:
    #     USERNAME: mohamedragab2024
    #     ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
    #   run: |
    #     git config --global user.email "m.ragab6010@gmail.com"
    #     git config --global user.name "mohamedragab2024"
    #     git clone https://${USERNAME}:${ACCESS_TOKEN}@github.com/mohamedragab2024/k8s-lessons.git
    #     cp -r k8s-lessons/charts/* charts/
    #     REPO_NAME=${{ github.event.repository.name }}
    #     for file in charts/**/*; do
    #       if [ -f "$file" ]; then
    #         sed -i "s#<CHART_NAME>#${REPO_NAME}#g" "$file"
    #       fi
    #     done
    #     sed -i "s#<CHART_NAME>#${REPO_NAME}#g" charts/Chart.yaml

    #     rm -rf k8s-lessons
    #     git add .
    #     git commit -m "Create a new version" || true
    #     git push origin env/prod || true

    # - uses: actions/checkout@v4
    #   name: Checkout
    #   with:
    #     token: ${{ secrets.ACCESS_TOKEN }}

    # - name: create argocd application
    #   shell: bash
    #   env:
    #     APP_NAME: ${{ github.event.repository.name }}
    #     REPO_NAME: ${{ github.event.repository.name }}
    #     NAMESPACE: ${{ github.event.repository.name }}
    #   run: |
    #     mkdir -p application
    #     envsubst < argocd-app.tpl > application/${{github.event.repository.name}}-argocd-app.yaml    
    #     git checkout --orphan env/prod  || git swich argocd-app
    #     git pull --set-upstream origin env/prod || true
    #     git add .
    #     git commit -m "Generate argocd application" || true
    #     git push origin env/prod  || true

# Step: setup k8s information for GHA
# Step: Install argocd client
# step: setup kubectl 
# Step: setup argocd using kubectl apply -f application/${{github.event.repository.name}}-argocd-app.yaml
# Step: run argocd sync 

        





    